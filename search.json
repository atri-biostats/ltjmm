[{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"simulate-one-example-dataset","dir":"Articles","previous_headings":"","what":"Simulate one example dataset","title":"Latent time joint mixed effect model simulation & fit","text":"Simulated outcomes relative unkown time shift, delta, raw scale. Simulated outcomes relative unkown time shift, delta, quantile scale. Simulated outcomes relative unkown time shift, delta, standard normal scale.","code":"rng_seed <- 20161001 set.seed(rng_seed) n <- 400   # subjects p <- 4     # outcomes t <- 4     # time points  dd <- tibble(     id = 1:n,     age.0 = rnorm(n, 75, 5)) %>%   cross_join(tibble(visit = 1:t)) %>%   mutate(year = (visit-1)*3) %>%   cross_join(tibble(outcome = 1:p)) %>%   arrange(id, outcome, visit) %>%   mutate(     Outcome = factor(outcome, levels = 1:p, labels = paste('Outcome', 1:p)),     Y = NA)  setup_ltjmm <- ltjmm(Y ~ year | 1 | id | outcome, data = dd)  ## variance parameters  sigma_y <- c(0.4, 0.4, 0.6, 0.5) # one less degree of freedom for intercepts due to identifiability constraint: sigma_alpha0 <- c(0.5, 1, 0.8)  sigma_alpha1 <- c(0.1, 0.1, 0.1, 0.1) sigma_alpha <- c(sigma_alpha0, sigma_alpha1) sigma_delta <- 4 N_X <- 1 beta <- matrix(c(1, 0.5, 2, 0.8), p, N_X) gamma <- c(0.2, 0.3, 0.25, 0.5)  simulated_ltjmm <- simulate(setup_ltjmm,   beta = beta,   gamma = gamma,   sigma_diag = sigma_alpha,   sigma_delta = sigma_delta,   sigma_y = sigma_y,   seed = 201610014)  dd$Y <- simulated_ltjmm$y  ECDF.list <- lapply(unique(dd$outcome), function(oc){   with(subset(dd, outcome == oc), ecdf(Y)) })  IECDF.list <- lapply(unique(dd$outcome), function(oc){   inv.ecdf.data <- with(subset(dd, outcome == oc),     as.numeric(quantile(Y, probs=seq(0,1,by=0.01))))   approxfun(seq(0,1,by=0.01), inv.ecdf.data) })  dd <- dd %>% mutate(   Q = case_when(     outcome == 1 ~ ECDF.list[[1]](Y),     outcome == 2 ~ ECDF.list[[2]](Y),     outcome == 3 ~ ECDF.list[[3]](Y),     outcome == 4 ~ ECDF.list[[4]](Y),   ),   Z = qnorm(Q)) %>%   left_join(tibble(     id = 1:n,     delta_true = simulated_ltjmm$delta), by = 'id') ggplot(dd, aes(x=year+delta_true, y=Y)) +   geom_line(aes(group=id), alpha =0.2) +   facet_wrap(~Outcome) ggplot(dd, aes(x=year+delta_true, y=Q)) +   geom_line(aes(group=id), alpha =0.2) +   facet_wrap(~Outcome) ggplot(dd, aes(x=year+delta_true, y=Z)) +   geom_line(aes(group=id), alpha =0.2) +   facet_wrap(~Outcome)"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"fit-ltjmm-with-independent-random-effects-with-stan","dir":"Articles","previous_headings":"","what":"Fit LTJMM with independent random effects with Stan","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"fit <- ltjmm_stan(Y ~ year |     1  | # fixed effects direct on outcome     id | outcome,   data = dd,   seed = rng_seed,   chains = 2, parallel_chains = 2,   iter_warmup = 500, iter_sampling = 500, thin = 2) # fit$save_object(file = 'sim_results.RDS') fit.sum <- fit$summary(c(\"beta\", \"gamma\", \"sigma_delta\", \"delta\", \"alpha0\", \"alpha1\")) %>%   as.data.frame() row.names(fit.sum) <- fit.sum %>% pull(variable) draws.beta <- fit$draws(\"beta\") draws.gamma <- fit$draws(\"gamma\") draws.sigma_delta <- fit$draws(\"sigma_delta\") save(fit.sum, draws.beta, draws.gamma, draws.sigma_delta,    file = 'sim_results.rdata') load(system.file(\"testdata\", \"sim_results.rdata\", package=\"ltjmm\"))"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"diagnostic-plots","dir":"Articles","previous_headings":"Fit LTJMM with independent random effects with Stan","what":"Diagnostic plots","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"mcmc_trace(draws.beta) mcmc_trace(draws.gamma) mcmc_trace(draws.sigma_delta)"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"true-versus-posterior-mean-of-latent-time-shifts","dir":"Articles","previous_headings":"Fit LTJMM with independent random effects with Stan","what":"True versus posterior mean of latent time shifts","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"delta <- simulated_ltjmm$delta delta.posteriormean <- fit.sum %>% filter(grepl('delta', variable)) %>%    filter(variable != 'sigma_delta') %>%   pull(mean) par(mgp = c(2.2, 0.45, 0), tcl = -0.4, mar = c(3.3, 3.6, 1.1, 1.1)) plot(delta, delta.posteriormean,   xlim = range(delta), ylim = range(delta),    xlab = expression(paste(\"True value of time shift \", delta[i])),   ylab = expression(paste(\"Posterior mean of time shift \", delta[i]))) abline(0, 1, lwd=2, col='red', lty = 2)"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"true-versus-posterior-mean-of-random-intercepts-and-slopes-for-each-outcome","dir":"Articles","previous_headings":"Fit LTJMM with independent random effects with Stan","what":"True versus posterior mean of random intercepts and slopes for each outcome","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"alpha0true <- as.data.frame(simulated_ltjmm$alpha0) %>% mutate(id = 1:n, parameter='alpha0') %>%    gather(outcome, truth, V1:V4) alpha1true <- as.data.frame(simulated_ltjmm$alpha1) %>% mutate(id = 1:n, parameter='alpha1') %>%    gather(outcome, truth, V1:V4) alphapm <- data.frame(   parameter.id.outcome = grep('alpha', row.names(fit.sum), value=TRUE),    posterior.mean = fit.sum[grepl('alpha', row.names(fit.sum)), 'mean']) %>%    separate(parameter.id.outcome, c('parameter', 'id', 'outcome', 'other')) %>%    mutate(id = as.numeric(id))  pd <- full_join(alpha0true, alpha1true, by=c('id', 'outcome', 'parameter', 'truth')) %>%   mutate(outcome = gsub('V', '', outcome)) %>%    full_join(alphapm)  ggplot(pd, aes(x=truth, y=posterior.mean)) +    geom_point(aes(shape=parameter, color=parameter), alpha=0.25) +   geom_abline(intercept=0, slope=1) + facet_wrap(~outcome, scales='free')"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"model-prediction-plots","dir":"Articles","previous_headings":"Fit LTJMM with independent random effects with Stan","what":"Model prediction plots","title":"Latent time joint mixed effect model simulation & fit","text":"Model predictions observations original scale relative estimated time shifts. Model predictions observations quantile scale relative estimated time shifts. Model predictions 95% credible intervals quantile scale relative estimated time shifts.","code":"nd0 <- expand_grid(   `(Intercept)` = 1,   `year+delta` = seq(-10, 20, by=1),   outcome = 1:p) %>%   cross_join(as_draws_df(draws.beta)) %>%   left_join(as_draws_df(draws.gamma), by = c('.iteration', '.chain', '.draw')) %>%   mutate(     Y = case_when(       outcome == 1 ~          `year+delta`*`gamma[1]` + `beta[1,1]`,       outcome == 2 ~          `year+delta`*`gamma[2]` + `beta[2,1]`,       outcome == 3 ~          `year+delta`*`gamma[3]` + `beta[3,1]`,       outcome == 4 ~          `year+delta`*`gamma[4]` + `beta[4,1]`),     Q = case_when(       outcome == 1 ~ ECDF.list[[1]](Y),       outcome == 2 ~ ECDF.list[[2]](Y),       outcome == 3 ~ ECDF.list[[3]](Y),       outcome == 4 ~ ECDF.list[[4]](Y)))  nd <- nd0 %>%   group_by(outcome, `year+delta`) %>%   summarise(     median_Y = median(Y),     lower.CL_Y = quantile(Y, probs = 0.025)[1],     upper.CL_Y = quantile(Y, probs = 1-0.025)[1],     median_Q = median(Q),     lower.CL_Q = quantile(Q, probs = 0.025)[1],     upper.CL_Q = quantile(Q, probs = 1-0.025)[1]) %>%   pivot_longer(median_Y:upper.CL_Q) %>%   separate(name, into = c('stat', 'scale'), sep = '_') %>%   pivot_wider(names_from = stat, values_from = value) %>%   mutate(     Outcome = factor(outcome, levels = c(1, 2, 3, 4),        labels = paste('Outcome', 1:p)))  dd <- dd %>%   left_join(     tibble(id = 1:n, delta_hat = delta.posteriormean), by = 'id') ggplot(filter(nd, scale == 'Y'), aes(x=`year+delta`, y=median)) +   geom_line() +   facet_wrap(~Outcome) +   geom_ribbon(aes(ymin=lower.CL, ymax=upper.CL), alpha=0.2, fill='blue') +   geom_point(data = dd, aes(x = year + delta_hat, y = Y), alpha = 0.01) +   ylab('Y') ggplot(filter(nd, scale == 'Q'), aes(x=`year+delta`, y=median)) +   geom_line() +   facet_wrap(~Outcome) +   geom_ribbon(aes(ymin=lower.CL, ymax=upper.CL), alpha=0.2, fill='blue') +   geom_point(data = dd, aes(x = year + delta_hat, y = Q), alpha = 0.01) +   ylab('Q') ggplot(filter(nd, scale == 'Q'), aes(x=`year+delta`, y=median)) +   geom_line(aes(color = Outcome)) +   geom_ribbon(aes(ymin=lower.CL, ymax=upper.CL, fill=Outcome), alpha=0.2) +   ylab('Q') +   theme(legend.position = 'inside', legend.position.inside = c(0.8, 0.2))"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"fit-ltjmm-with-multivariate-random-effects-with-stan","dir":"Articles","previous_headings":"","what":"Fit LTJMM with multivariate random effects with Stan","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"fit <- ltjmm_stan(Y ~ year |     1  | # fixed effects direct on outcome     id | outcome,   random_effects = \"multivariate\",   data = dd,   seed = rng_seed,   chains = 2, parallel_chains = 2,   iter_warmup = 500, iter_sampling = 500, thin = 2) # fit$save_object(file = 'sim_lt_multi_results.RDS') fit.sum <- fit$summary(c(\"beta\", \"gamma\", \"sigma_delta\", \"delta\", \"alpha0\", \"alpha1\")) %>%   as.data.frame() row.names(fit.sum) <- fit.sum %>% pull(variable) draws.beta <- fit$draws(\"beta\") draws.gamma <- fit$draws(\"gamma\") draws.sigma_delta <- fit$draws(\"sigma_delta\") save(fit.sum, draws.beta, draws.gamma, draws.sigma_delta,    file = 'sim_lt_multi_results.rdata') load(system.file(\"testdata\", \"sim_lt_multi_results.rdata\", package=\"ltjmm\"))"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"diagnostic-plots-1","dir":"Articles","previous_headings":"Fit LTJMM with multivariate random effects with Stan","what":"Diagnostic plots","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"mcmc_trace(draws.beta) mcmc_trace(draws.gamma)"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"true-versus-posterior-mean-of-latent-time-shifts-1","dir":"Articles","previous_headings":"Fit LTJMM with multivariate random effects with Stan","what":"True versus posterior mean of latent time shifts","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"delta <- simulated_ltjmm$delta delta.posteriormean <- fit.sum %>% filter(grepl('delta', variable)) %>%    filter(variable != 'sigma_delta') %>%   pull(mean) par(mgp = c(2.2, 0.45, 0), tcl = -0.4, mar = c(3.3, 3.6, 1.1, 1.1)) plot(delta, delta.posteriormean,   xlim = range(delta), ylim = range(delta),    xlab = expression(paste(\"True value of time shift \", delta[i])),   ylab = expression(paste(\"Posterior mean of time shift \", delta[i]))) abline(0, 1, lwd=2, col='red', lty = 2)"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"true-versus-posterior-mean-of-random-intercepts-and-slopes-for-each-outcome-1","dir":"Articles","previous_headings":"Fit LTJMM with multivariate random effects with Stan","what":"True versus posterior mean of random intercepts and slopes for each outcome","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"alpha0true <- as.data.frame(simulated_ltjmm$alpha0) %>% mutate(id = 1:n, parameter='alpha0') %>%    gather(outcome, truth, V1:V4) alpha1true <- as.data.frame(simulated_ltjmm$alpha1) %>% mutate(id = 1:n, parameter='alpha1') %>%    gather(outcome, truth, V1:V4) alphapm <- data.frame(   parameter.id.outcome = grep('alpha', row.names(fit.sum), value=TRUE),    posterior.mean = fit.sum[grepl('alpha', row.names(fit.sum)), 'mean']) %>%    separate(parameter.id.outcome, c('parameter', 'id', 'outcome', 'other')) %>%    mutate(id = as.numeric(id))  pd <- full_join(alpha0true, alpha1true, by=c('id', 'outcome', 'parameter', 'truth')) %>%   mutate(outcome = gsub('V', '', outcome)) %>%    full_join(alphapm)  ggplot(pd, aes(x=truth, y=posterior.mean)) +    geom_point(aes(shape=parameter, color=parameter), alpha=0.25) +   geom_abline(intercept=0, slope=1) + facet_wrap(~outcome, scales='free')"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"fit-joint-mixed-effect-model-jmm-with-multivariate-random-effects-with-stan","dir":"Articles","previous_headings":"","what":"Fit joint mixed effect model (JMM) with multivariate random effects with Stan","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"fit <- ltjmm_stan(Y ~ year |     1  | # fixed effects direct on outcome     id | outcome,   lt = FALSE,   random_effects = \"multivariate\",   data = dd,   seed = rng_seed,   chains = 2, parallel_chains = 2,   iter_warmup = 250, iter_sampling = 250, thin = 1) # fit$save_object(file = 'sim_jmm_results.RDS') fit.sum <- fit$summary(c(\"beta\", \"gamma\", \"alpha0\", \"alpha1\")) %>%   as.data.frame() row.names(fit.sum) <- fit.sum %>% pull(variable) draws.beta <- fit$draws(\"beta\") draws.gamma <- fit$draws(\"gamma\") save(fit.sum, draws.beta, draws.gamma,    file = 'sim_jmm_results.rdata') load(system.file(\"testdata\", \"sim_jmm_results.rdata\", package=\"ltjmm\"))"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"diagnostic-plots-2","dir":"Articles","previous_headings":"Fit joint mixed effect model (JMM) with multivariate random effects with Stan","what":"Diagnostic plots","title":"Latent time joint mixed effect model simulation & fit","text":"Note. Model mispecified, might explain poor mixing.","code":"mcmc_trace(draws.beta)"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"true-versus-posterior-mean-of-random-intercepts-and-slopes-for-each-outcome-2","dir":"Articles","previous_headings":"Fit joint mixed effect model (JMM) with multivariate random effects with Stan","what":"True versus posterior mean of random intercepts and slopes for each outcome","title":"Latent time joint mixed effect model simulation & fit","text":"Note. Model mispecified, might explain poor estimation.","code":"alpha0true <- as.data.frame(simulated_ltjmm$alpha0) %>% mutate(id = 1:n, parameter='alpha0') %>%    gather(outcome, truth, V1:V4) alpha1true <- as.data.frame(simulated_ltjmm$alpha1) %>% mutate(id = 1:n, parameter='alpha1') %>%    gather(outcome, truth, V1:V4) alphapm <- data.frame(   parameter.id.outcome = grep('alpha', row.names(fit.sum), value=TRUE),    posterior.mean = fit.sum[grepl('alpha', row.names(fit.sum)), 'mean']) %>%    separate(parameter.id.outcome, c('parameter', 'id', 'outcome', 'other')) %>%    mutate(id = as.numeric(id))  pd <- full_join(alpha0true, alpha1true, by=c('id', 'outcome', 'parameter', 'truth')) %>%   mutate(outcome = gsub('V', '', outcome)) %>%    full_join(alphapm)  ggplot(pd, aes(x=truth, y=posterior.mean)) +    geom_point(aes(shape=parameter, color=parameter), alpha=0.25) +   geom_abline(intercept=0, slope=1) + facet_wrap(~outcome, scales='free')"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"fit-mixed-effect-model-mm-with-independent-univariate-random-effects-with-stan","dir":"Articles","previous_headings":"","what":"Fit mixed effect model (MM) with independent univariate random effects with Stan","title":"Latent time joint mixed effect model simulation & fit","text":"","code":"fit <- ltjmm_stan(Y ~ year |     1  | # fixed effects direct on outcome     id | outcome,   lt = FALSE,   random_effects = \"univariate\",   data = dd,   seed = rng_seed,   chains = 2, parallel_chains = 2,   iter_warmup = 250, iter_sampling = 250, thin = 1) # fit$save_object(file = 'sim_mm_results.RDS') fit.sum <- fit$summary(c(\"beta\", \"gamma\", \"alpha0\", \"alpha1\")) %>%   as.data.frame() row.names(fit.sum) <- fit.sum %>% pull(variable) draws.beta <- fit$draws(\"beta\") draws.gamma <- fit$draws(\"gamma\") save(fit.sum, draws.beta, draws.gamma,    file = 'sim_mm_results.rdata') load(system.file(\"testdata\", \"sim_mm_results.rdata\", package=\"ltjmm\"))"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"diagnostic-plots-3","dir":"Articles","previous_headings":"Fit mixed effect model (MM) with independent univariate random effects with Stan","what":"Diagnostic plots","title":"Latent time joint mixed effect model simulation & fit","text":"Note. Model mispecified, might explain poor mixing. Note. Model mispecified, might explain poor mixing.","code":"mcmc_trace(draws.beta) mcmc_trace(draws.gamma)"},{"path":"https://atri-biostats.github.io/ltjmm/articles/simulated_example_ltjmm.html","id":"true-versus-posterior-mean-of-random-intercepts-and-slopes-for-each-outcome-3","dir":"Articles","previous_headings":"Fit mixed effect model (MM) with independent univariate random effects with Stan","what":"True versus posterior mean of random intercepts and slopes for each outcome","title":"Latent time joint mixed effect model simulation & fit","text":"Note. Model mispecified, might explain poor estimation.","code":"alpha0true <- as.data.frame(simulated_ltjmm$alpha0) %>% mutate(id = 1:n, parameter='alpha0') %>%    gather(outcome, truth, V1:V4) alpha1true <- as.data.frame(simulated_ltjmm$alpha1) %>% mutate(id = 1:n, parameter='alpha1') %>%    gather(outcome, truth, V1:V4) alphapm <- data.frame(   parameter.id.outcome = grep('alpha', row.names(fit.sum), value=TRUE),    posterior.mean = fit.sum[grepl('alpha', row.names(fit.sum)), 'mean']) %>%    separate(parameter.id.outcome, c('parameter', 'id', 'outcome', 'other')) %>%    mutate(id = as.numeric(id))  pd <- full_join(alpha0true, alpha1true, by=c('id', 'outcome', 'parameter', 'truth')) %>%   mutate(outcome = gsub('V', '', outcome)) %>%    full_join(alphapm)  ggplot(pd, aes(x=truth, y=posterior.mean)) +    geom_point(aes(shape=parameter, color=parameter), alpha=0.25) +   geom_abline(intercept=0, slope=1) + facet_wrap(~outcome, scales='free')"},{"path":"https://atri-biostats.github.io/ltjmm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael C Donohue. Author, maintainer. Dan Li. Author.","code":""},{"path":"https://atri-biostats.github.io/ltjmm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Michael C Donohue Dan Li,(). ltjmm: Latent Time Joint Mixed-effects Models. R package version 1.8. Li, D., Iddi, S., Thompson, W. K., Donohue, M. C., Alzheimer's Disease Neuroimaging Initiative. (2017). Bayesian latent time joint mixed effect models multicohort longitudinal data. Statistical methods medical research, https://doi.org/10.1177/0962280217737566.","code":"@Manual{,   title = {ltjmm: Latent Time Joint Mixed-effects Models},   author = {Michael C Donohue and Dan Li},   note = {R package version 1.8}, } @Article{,   title = {Bayesian latent time joint mixed effect models for multicohort longitudinal data},   author = {Dan Li and Samuel Iddi and Wesley K Thompson and Michael C Donohue and {for the Alzheimer’s Disease Neuroimaging Initiative}},   journal = {Statistical methods in medical research},   year = {2017},   url = {https://doi.org/10.1177/0962280217737566}, }"},{"path":"https://atri-biostats.github.io/ltjmm/index.html","id":"ltjmm-latent-time-joint-mixed-effects-models","dir":"","previous_headings":"","what":"Latent Time Joint Mixed Effect Models","title":"Latent Time Joint Mixed Effect Models","text":"Diseases progress long periods time often studied observing cohorts different stages disease shorter periods time. apply MCMC sampling estimate Latent Time Joint Mixed Effect Models (LTJMM) short-term observations unknown relative observation times. LTJMM described Li, et al. (2017).","code":""},{"path":"https://atri-biostats.github.io/ltjmm/index.html","id":"installing-ltjmm","dir":"","previous_headings":"","what":"Installing ltjmm","title":"Latent Time Joint Mixed Effect Models","text":"ltjmm package requires CmdStanR instantiate. See https://wlandau.github.io/instantiate/ installations instructions. CmdStanR instantiate installed, use following install ltjmm:","code":"install.packages(\"devtools\") devtools::install_github(\"atri-biostats/ltjmm\", build_vignettes = TRUE)"},{"path":"https://atri-biostats.github.io/ltjmm/index.html","id":"model-details","dir":"","previous_headings":"","what":"Model details","title":"Latent Time Joint Mixed Effect Models","text":"Stan code LTJMMs located src/stan directory repository. models implemented package restricted random intercept slope outcome, fixed effect covariates outcome, Gaussian residuals identity link function. ltjmm::ltjmm_stan function can fit models without latent time parameter (lt=TRUE lt=FALSE). lt=FALSE model joint (multi-outcome) mixed effect model. One can assume random effects one multivariate Gaussian distribution (random_effects='multivariate') random effect separate univariate Gaussian distributions (random_effects='univariate'). fork rstanarm repository includes function stan_ltjmm, allows different random effects, fixed effects, exponential family links/distributions 20 outcomes.","code":""},{"path":"https://atri-biostats.github.io/ltjmm/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Latent Time Joint Mixed Effect Models","text":"Li, D., Iddi, S., Thompson, W. K., Donohue, M. C., ADNI. (2017). Bayesian latent time joint mixed effect models multicohort longitudinal data. Statistical methods medical research. https://doi.org/10.1177/0962280217737566","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Latent Time Joint Mixed Effect Models ('ltjmm') — ltjmm-package","title":"Latent Time Joint Mixed Effect Models ('ltjmm') — ltjmm-package","text":"Diseases progress long periods time often studied   observing cohorts different stages disease shorter periods   time. apply MCMC sampling estimate Latent Time Joint Mixed Effect Models   (LTJMM) short-term observations unknown relative observation times.","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Latent Time Joint Mixed Effect Models ('ltjmm') — ltjmm-package","text":"Gabry J, Češnovar R, Johnson (2024). _cmdstanr: R Interface 'CmdStan'_. https://mc-stan.org/cmdstanr/, https://discourse.mc-stan.org. Landau WM (2024). _instantiate: Pre-Compiled 'CmdStan' Models R Packages_. R package version 0.2.0, <https://CRAN.R-project.org/package=instantiate>.","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Latent Time Joint Mixed Effect Models ('ltjmm') — ltjmm-package","text":"Michael Donohue <mdonohue@usc.edu>","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm.html","id":null,"dir":"Reference","previous_headings":"","what":"LTJMM data setup for fitting with rstan — ltjmm","title":"LTJMM data setup for fitting with rstan — ltjmm","text":"LTJMM data setup fitting rstan","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LTJMM data setup for fitting with rstan — ltjmm","text":"","code":"ltjmm(formula, data, subset, na.action)"},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LTJMM data setup for fitting with rstan — ltjmm","text":"formula Formula rhs denoted outcome stacked dataset, rhs 4 parts, e.g.: Y ~ variable observation time | fixed effects | subject id | outcome id data data.frame containing variables model. subset optional vector specifying subset observations used fitting process. na.action function indicates happen data contain NAs.","code":""},{"path":[]},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Latent time joint mixed effect model with univariate normal distributions on random effects fit with stan — ltjmm_stan","title":"Latent time joint mixed effect model with univariate normal distributions on random effects fit with stan — ltjmm_stan","text":"Latent time joint mixed effect model univariate normal distributions random effects fit stan","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Latent time joint mixed effect model with univariate normal distributions on random effects fit with stan — ltjmm_stan","text":"","code":"ltjmm_stan(   formula,   lt = TRUE,   random_effects = \"univariate\",   data,   subset,   na.action,   ... )"},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm_stan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Latent time joint mixed effect model with univariate normal distributions on random effects fit with stan — ltjmm_stan","text":"formula Formula rhs denoted outcome stacked dataset, rhs 4 parts, e.g.: Y ~ variable observation time | fixed effects | subject id | outcome id lt logical, indicating whether latent time effect included. random_effects character specifying distribution random intercepts slopes. Option 'univariate' specifies random intercepts slopes outcome follow univariate independent normal distributions. Option 'multivariate' specifies random intercepts slopes follow single mutilvariate normal distribution.) data data.frame containing variables model. subset optional vector specifying subset observations used fitting process. na.action function indicates happen data contain NAs. ... Arguments passed `cmdstanr::sample` (e.g. iter_warmup, iter_sampling, chains, parallel_chains).","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/ltjmm_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Latent time joint mixed effect model with univariate normal distributions on random effects fit with stan — ltjmm_stan","text":"CmdStanMCMC object.","code":""},{"path":[]},{"path":"https://atri-biostats.github.io/ltjmm/reference/predict.ltjmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predictions and confidence intervals for LTJMM models — predict.ltjmm","title":"Obtain predictions and confidence intervals for LTJMM models — predict.ltjmm","text":"Obtain predictions confidence intervals LTJMM models","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/predict.ltjmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predictions and confidence intervals for LTJMM models — predict.ltjmm","text":"","code":"# S3 method for class 'ltjmm' predict(   object,   stanfit.object,   newdata,   link,   chains = NULL,   level = 0.95,   grouping = c(\"population\", \"subject\")[1],   ... )"},{"path":"https://atri-biostats.github.io/ltjmm/reference/predict.ltjmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predictions and confidence intervals for LTJMM models — predict.ltjmm","text":"object ltjmm object stanfit.object corresponding stanfit object newdata new data generate predictions link link function (defaults identity) chains number MCMC chains. level credible intervals grouping character indicating whether 'population' 'subject' level precictions desired. ... additional optional arguments.","code":""},{"path":[]},{"path":"https://atri-biostats.github.io/ltjmm/reference/setup.predict.ltjmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create design matrices and extract parameter estimates to obtain predictions and confidence intervals for LTJMMs — setup.predict.ltjmm","title":"Create design matrices and extract parameter estimates to obtain predictions and confidence intervals for LTJMMs — setup.predict.ltjmm","text":"Create design matrices extract parameter estimates obtain predictions confidence intervals LTJMMs","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/setup.predict.ltjmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create design matrices and extract parameter estimates to obtain predictions and confidence intervals for LTJMMs — setup.predict.ltjmm","text":"","code":"setup.predict.ltjmm(   object,   stanfit.object,   newdata,   link,   chains = NULL,   level = 0.95 )"},{"path":"https://atri-biostats.github.io/ltjmm/reference/setup.predict.ltjmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create design matrices and extract parameter estimates to obtain predictions and confidence intervals for LTJMMs — setup.predict.ltjmm","text":"object ltjmm object stanfit.object corresponding stanfit object newdata new data generate predictions link link function (defaults identity) chains number MCMC chains. level credible intervals","code":""},{"path":[]},{"path":"https://atri-biostats.github.io/ltjmm/reference/simulate.ltjmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from LTJMM with multivariate normal distribution for random effects — simulate.ltjmm","title":"Simulate data from LTJMM with multivariate normal distribution for random effects — simulate.ltjmm","text":"Simulate data LTJMM multivariate normal distribution random effects","code":""},{"path":"https://atri-biostats.github.io/ltjmm/reference/simulate.ltjmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from LTJMM with multivariate normal distribution for random effects — simulate.ltjmm","text":"","code":"# S3 method for class 'ltjmm' simulate(   object,   nsim = object$data$N_obs,   seed = NULL,   beta = array(1, c(object$data$N_out, object$data$N_X)),   gamma = rep(1, object$data$N_out),   sigma_delta = 1,   sigma_y = rep(1, object$data$N_out),   sigma_diag = diag(rep(1, 2 * object$data$N_out - 1)),   Lcorr = diag(rep(1, 2 * object$data$N_out - 1)),   delta = NULL,   ... )"},{"path":"https://atri-biostats.github.io/ltjmm/reference/simulate.ltjmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from LTJMM with multivariate normal distribution for random effects — simulate.ltjmm","text":"object ltjmm object nsim number response vectors simulate. Defaults 1. seed random seed beta fixed effects covariates gamma latent time slope sigma_delta standard deviation latent time sigma_y standard deviation residual variance sigma_diag (Cholesky factorization diag_matrix(sigma_diag) * Lcorr ) random intercepts slopes Lcorr (Cholesky factorization diag_matrix(sigma_diag) * Lcorr) random intercepts slopes delta vector latent times. NULL, latent times delta simulated normal(0, sigma_delta). ... additional optional arguments.","code":""},{"path":[]}]
